// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "lltm_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_jit_get_all_operators_names
torch::vector::string cpp_jit_get_all_operators_names();
RcppExport SEXP _lltm_cpp_jit_get_all_operators_names() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_jit_get_all_operators_names());
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_get_operator_from_name
torch::string cpp_jit_get_operator_from_name(torch::string x);
RcppExport SEXP _lltm_cpp_jit_get_operator_from_name(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_get_operator_from_name(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_jit_get_all_operators_for
torch::jit::Operator cpp_jit_get_all_operators_for(torch::string x);
RcppExport SEXP _lltm_cpp_jit_get_all_operators_for(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< torch::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_jit_get_all_operators_for(x));
    return rcpp_result_gen;
END_RCPP
}
// lltm_raise_exception
void lltm_raise_exception();
RcppExport SEXP _lltm_lltm_raise_exception() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    lltm_raise_exception();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lltm_cpp_jit_get_all_operators_names", (DL_FUNC) &_lltm_cpp_jit_get_all_operators_names, 0},
    {"_lltm_cpp_jit_get_operator_from_name", (DL_FUNC) &_lltm_cpp_jit_get_operator_from_name, 1},
    {"_lltm_cpp_jit_get_all_operators_for", (DL_FUNC) &_lltm_cpp_jit_get_all_operators_for, 1},
    {"_lltm_lltm_raise_exception", (DL_FUNC) &_lltm_lltm_raise_exception, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_lltm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
